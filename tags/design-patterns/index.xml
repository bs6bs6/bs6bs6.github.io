<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Design Patterns - Tag - bs6's blog</title><link>http://bs6bs6.github.io/tags/design-patterns/</link><description>Design Patterns - Tag - bs6's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 12 Oct 2023 15:01:28 +0800</lastBuildDate><atom:link href="http://bs6bs6.github.io/tags/design-patterns/" rel="self" type="application/rss+xml"/><item><title>Why can't we build a Singleton Interface in Java？</title><link>http://bs6bs6.github.io/why-cant-we-build-a-singleton-interface-in-java/</link><pubDate>Thu, 12 Oct 2023 15:01:28 +0800</pubDate><author>bs6</author><guid>http://bs6bs6.github.io/why-cant-we-build-a-singleton-interface-in-java/</guid><description><![CDATA[Why can&rsquo;t we build a Singleton Interface in Java？ This is a typical Singleton implementation in Java program:
1 2 3 4 5 6 7 8 9 public class Singleton { private static final Singleton INSTANCE = new Singleton(); private Singleton() {} public static Singleton getInstance() { return INSTANCE; } } That&rsquo;s a graceful Singleton implementation in C#:
1 2 3 4 public abstract class Singleton &lt;T&gt;{ private static T singleton; } In this C# code, we can simply extend this abstract Singleton class to make the Class a Singleton class.]]></description></item></channel></rss>